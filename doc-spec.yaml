openapi: 3.0.0
info:
  title: Sample API
  description: This is a sample API to demonstrate OpenAPI specifications.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://college-hack-api.azurewebsites.net
    description: Production server
paths:
  /auth/google:
    get:
      summary: Authenticate with Google OAuth
      description: Returns a URL to authenticate with Google OAuth.
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: The URL to authenticate with Google OAuth
        "401":
          description: Invalid credentials

        "403":
          description: Access denied

  /auth/google/callback:
    get:
      summary: Get a JWT token from Google OAuth
      description: Endpoint for Google to redirect to after user authentication. Returns a JWT token from Google OAuth.
      responses:
        "200":
          description: A JWT token and User object
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: The JWT token
                  user:
                    $ref: "#/components/schemas/User"
                  isFirstAccess:
                    type: boolean
                    description: Whether the user is accessing the app for the first time

        "500":
          description: Authentication failed
  /user/{id}:
    get:
      summary: Return a user
      description: Return a user by their ID in MongoDB, not the Google ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the user to retrieve.
      responses:
        "200":
          description: A user object
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Invalid user ID
        "404":
          description: User not found
        "500":
          description: Server error

    patch:
      summary: Update a user
      description: Return a user updated by their ID in MongoDB, not the Google ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the user to retrieve.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: A user object
  /documents/upload:
    post:
      summary: Upload one or more files to the server
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: Files uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Files uploaded successfully
        "413":
          description: Error related to file extension
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: File extension not allowed
        "500":
          description: Error during the upload process
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Multer uploading error
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: The user ID
        name:
          type: string
          description: The user's name
        surname:
          type: string
          description: The user's surname
        email:
          type: string
          description: The user's email
        picture:
          type: string
          description: The user's profile picture
        googleId:
          type: string
          description: The user's Google ID
        college:
          type: string
          description: The user's college
        program:
          type: string
          description: The user's program
        sections:
          type: array
          items:
            $ref: "#/components/schemas/SectionUser"
          description: The user's sections
        gpa:
          type: number
          description: The user's GPA
    UserUpdate:
      type: object
      properties:
        name:
          type: string
          description: The user's name
        surname:
          type: string
          description: The user's surname
        email:
          type: string
          description: The user's email
        picture:
          type: string
          description: The user's profile picture
        college:
          type: string
          description: The user's college
        program:
          type: string
          description: The user's program
        gpa:
          type: number
          description: The user's GPA
    SectionUser:
      type: object
      properties:
        sectionId:
          type: string
          description: The section ID
        semester:
          type: number
          description: The semester
        year:
          type: number
          description: The year
        grade:
          type: number
          description: The grade
        isFinished:
          type: boolean
          description: Whether the section is finished
